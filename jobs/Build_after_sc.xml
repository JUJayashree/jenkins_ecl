<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>This job is created to build ‘jenkins_build’ file if ECL syntax errors are zero and build is success else task should only upload the comment on ECL syntax errors. [ Note :The comment sent on Pull Request:1. Build status2. Errors encountered 3. Error Summary ]&#xd;
</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.coravy.hudson.plugins.github.GithubProjectProperty plugin="github@1.29.2">
      <projectUrl>https://github.com/JUJayashree/jenkins_ecl/</projectUrl>
      <displayName></displayName>
    </com.coravy.hudson.plugins.github.GithubProjectProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@3.9.1">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>https://github.com/JUJayashree/jenkins_ecl.git</url>
        <credentialsId>b545d38e-be03-41cb-9e15-7cec4485d4ac</credentialsId>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>*/master</name>
      </hudson.plugins.git.BranchSpec>
      <hudson.plugins.git.BranchSpec>
        <name>${sha1}</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions/>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

COMMENT_LOG_PATH=&quot;/var/lib/jenkins/workspace/PR_syncheck_Comments_modified/jenkins_pr_comment.log&quot;

QUERY_PATH=&quot;/var/lib/jenkins/workspace/PR_syncheck_Comments_modified&quot;

if [ -f $COMMENT_LOG_PATH ]; then
    rm $COMMENT_LOG_PATH
fi

echo $&apos;\n&apos;&quot;Automatic Build after syntax check:&quot;$&apos;\n&apos; &gt;&gt; $COMMENT_LOG_PATH 
cd /var/lib/jenkins/workspace/pr_buildstatus_comment/
chmod a=rwx jenkins_build
./jenkins_build 2&gt;&gt; $COMMENT_LOG_PATH

error=0
warning=0
while read line  
do
	if [[ $line =~ &quot; error &quot; ]]; then
		error=`expr $error + 1`
	fi
	if [[ $line =~ &quot; warning &quot; ]]; then
		warning=`expr $warning + 1`
	fi
	
done &lt; $COMMENT_LOG_PATH

echo &quot;********************************************************&quot;&gt;&gt; $COMMENT_LOG_PATH
echo &quot;Total Errors=&quot; $error &gt;&gt; $COMMENT_LOG_PATH
echo &quot;Total warnings=&quot; $warning &gt;&gt; $COMMENT_LOG_PATH
echo &quot;*********************************************************&quot; &gt;&gt; $COMMENT_LOG_PATH</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <org.jvnet.hudson.plugins.groovypostbuild.GroovyPostbuildRecorder plugin="groovy-postbuild@2.4.1">
      <script plugin="script-security@1.44">
        <script>build = manager.build.result
url = manager.build.url
File file = new File(&apos;/var/lib/jenkins/workspace/PR_syncheck_Comments_modified/jenkins_pr_comment.log&apos;)

if ( build =~ &apos;SUCCESS&apos; ) 
{
     File logf = new File(&quot;/var/lib/jenkins/workspace/PR_syncheck_Comments_modified/jenkins_pr_comment.log&quot;).eachLine {  
         line -&gt;
        if ( line =~ &apos;Total Errors: +[0-9][0-9]*$&apos;  )
        {
                  build=&quot;FAILURE&quot;
        }
        if ( line =~ &apos;Total Errors: 0&apos;  )
        {
                  build=&quot;SUCCESS&quot;
        }

        }
}


def lines = file.readLines()
lines = lines.plus(3, &apos;Build Status ::&apos; + build)
file.text = lines.join(&apos;\n&apos;)
lines = lines.plus(4, &apos;Build URL ::&apos; + url)
file.text = lines.join(&apos;\n&apos;)</script>
        <sandbox>false</sandbox>
      </script>
      <behavior>0</behavior>
      <runForMatrixParent>false</runForMatrixParent>
    </org.jvnet.hudson.plugins.groovypostbuild.GroovyPostbuildRecorder>
  </publishers>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.34">
      <deleteDirs>false</deleteDirs>
      <cleanupParameter></cleanupParameter>
      <externalDelete></externalDelete>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
  </buildWrappers>
</project>